# -*- coding: utf-8 -*-
"""BU 425 project: customer engagement and retention

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17BWgdiRG50EBEa7kOLLDHBjNLxc_n3IT
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd 

import matplotlib.pyplot as plt
import seaborn as sns               # Provides a high level interface for drawing attractive and informative statistical graphics
# %matplotlib inline
sns.set()
from subprocess import check_output

import warnings                                            # Ignore warning related to pandas_profiling
warnings.filterwarnings('ignore') 
# source site https://www.kaggle.com/pankajjsh06/ibm-watson-marketing-data-analysis-prediction/comments#Index

def annot_plot(ax,w,h):                                    # function to add data to plot
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    for p in ax.patches:
         ax.annotate(f"{p.get_height() * 100 / data.shape[0]:.2f}%", (p.get_x() + p.get_width() / 2., p.get_height()),
         ha='center', va='center', fontsize=11, color='black', rotation=0, xytext=(0, 10),
         textcoords='offset points')             
def annot_plot_num(ax,w,h):                                    # function to add data to plot
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    for p in ax.patches:
        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))

import os

data = pd.read_csv("/content/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv")
data.info()
data.describe() # stats summary
data.isnull().sum() # checking for missing data

# EDA Plots switch between Response and Sales Channel
ax = sns.countplot('Response',data = data)
plt.ylabel('Total number of Response')
annot_plot(ax, 0.08,1)
plt.show() # only 14% respond to marketing calls
print()
ax = sns.countplot('Sales Channel',data = data)
plt.ylabel('Total number of each Sales Channel')
annot_plot(ax, 0.08,1)
plt.show() # 
print()
ax = sns.countplot('Response',hue = 'Gender' ,data = data)
plt.ylabel('Total number of Responses')
annot_plot(ax, 0.08,1)
plt.show()
print()
ax = sns.countplot('Sales Channel',hue = 'Gender' ,data = data)
plt.ylabel('Total number in each Sales Channel')
annot_plot(ax, 0.1,1)
plt.show()
print()
plt.figure(figsize=(12,6))
ax = sns.countplot('Response', hue = data['Marital Status'], data = data)
annot_plot(ax,0.08,1)
plt.show()
print()
plt.figure(figsize=(12,6))
ax = sns.countplot('Sales Channel', hue = data['Marital Status'], data = data)
annot_plot(ax,0.08,1)
plt.show()
print()
plt.figure(figsize=(8,4))
ax = sns.countplot('Response',hue = 'Renew Offer Type' ,data = data)
plt.ylabel('Total number of Responses')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(15,5))
ax = sns.countplot('Sales Channel',hue = 'Renew Offer Type' ,data = data)
plt.ylabel('Total number in each Sales Channel')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(8,4))
ax = sns.countplot('Response',hue = 'Education' ,data = data)
plt.ylabel('Total number of Responses')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(15,5))
ax = sns.countplot('Sales Channel',hue = 'Education' ,data = data)
plt.ylabel('Total number in each Sales Channel')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(8,4))
ax = sns.countplot('Response',hue = 'Sales Channel' ,data = data)
plt.ylabel('Total number of Responses')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(12,6))
sns.boxplot(y = 'Income' , x = 'Response', data = data)
plt.show()
print()
plt.figure(figsize=(12,6))
sns.boxplot(y = 'Income' , x = 'Sales Channel', data = data)
plt.show()
print()
plt.figure(figsize=(10,6))
ax = sns.countplot('Response',hue = 'EmploymentStatus' ,data = data)
plt.ylabel('Total number of Response')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(15,6))
ax = sns.countplot('Sales Channel',hue = 'EmploymentStatus' ,data = data)
plt.ylabel('Total number in each Sales Channel')
annot_plot(ax, 0.08,1)
plt.show()
print()
plt.figure(figsize=(15,6))
ax = sns.countplot('Response',hue = 'Policy' ,data = data)
plt.ylabel('Total number of Responses')
annot_plot(ax, 0.08,1)
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(y = 'Customer Lifetime Value' , x = 'Response', data = data)
plt.show()
print()
plt.figure(figsize=(10,6))
sns.boxplot(y = 'Total Claim Amount' , x = 'Response', data = data)
plt.show()
print()
plt.figure(figsize=(10,6))
sns.boxplot(y = 'Monthly Premium Auto', x = 'Response', data = data)
plt.show()
print()
plt.figure(figsize=(10,6))
sns.boxplot(y = 'Months Since Policy Inception', x = 'Response', data = data)
plt.show()
print()

correlation_matrix = data.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)